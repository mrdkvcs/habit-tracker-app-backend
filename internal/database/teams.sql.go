// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: teams.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (id , name,  team_industry , team_size , is_private , created_by) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name, team_industry, team_size, is_private, created_by, created_at, updated_at
`

type CreateTeamParams struct {
	ID           uuid.UUID
	Name         string
	TeamIndustry string
	TeamSize     int32
	IsPrivate    bool
	CreatedBy    uuid.UUID
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam,
		arg.ID,
		arg.Name,
		arg.TeamIndustry,
		arg.TeamSize,
		arg.IsPrivate,
		arg.CreatedBy,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeamIndustry,
		&i.TeamSize,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTeamMembership = `-- name: CreateTeamMembership :one
INSERT INTO team_memberships (id, team_id, user_id ) VALUES ($1, $2, $3 ) 
RETURNING id, team_id, user_id, created_at, updated_at
`

type CreateTeamMembershipParams struct {
	ID     uuid.UUID
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CreateTeamMembership(ctx context.Context, arg CreateTeamMembershipParams) (TeamMembership, error) {
	row := q.db.QueryRowContext(ctx, createTeamMembership, arg.ID, arg.TeamID, arg.UserID)
	var i TeamMembership
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTeamUserRoles = `-- name: CreateTeamUserRoles :exec
INSERT INTO team_user_roles (id, team_membership_id, role_id) VALUES ($1, $2, $3 )
`

type CreateTeamUserRolesParams struct {
	ID               uuid.UUID
	TeamMembershipID uuid.UUID
	RoleID           uuid.UUID
}

func (q *Queries) CreateTeamUserRoles(ctx context.Context, arg CreateTeamUserRolesParams) error {
	_, err := q.db.ExecContext(ctx, createTeamUserRoles, arg.ID, arg.TeamMembershipID, arg.RoleID)
	return err
}

const getAllTeamRoles = `-- name: GetAllTeamRoles :many
SELECT id, role_name FROM team_roles
WHERE team_id = $1
`

type GetAllTeamRolesRow struct {
	ID       uuid.UUID
	RoleName string
}

func (q *Queries) GetAllTeamRoles(ctx context.Context, teamID uuid.UUID) ([]GetAllTeamRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeamRoles, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTeamRolesRow
	for rows.Next() {
		var i GetAllTeamRolesRow
		if err := rows.Scan(&i.ID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamActivities = `-- name: GetTeamActivities :many
SELECT activity_name, points , activity_roles FROM team_activities WHERE team_id = $1
`

type GetTeamActivitiesRow struct {
	ActivityName  string
	Points        int32
	ActivityRoles []string
}

func (q *Queries) GetTeamActivities(ctx context.Context, teamID uuid.UUID) ([]GetTeamActivitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamActivities, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamActivitiesRow
	for rows.Next() {
		var i GetTeamActivitiesRow
		if err := rows.Scan(&i.ActivityName, &i.Points, pq.Array(&i.ActivityRoles)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamInFo = `-- name: GetTeamInFo :one

SELECT t.id ,  t.name , t.team_industry , t.team_size , t.is_private  , t.created_by  
FROM teams t
WHERE t.id = $1
`

type GetTeamInFoRow struct {
	ID           uuid.UUID
	Name         string
	TeamIndustry string
	TeamSize     int32
	IsPrivate    bool
	CreatedBy    uuid.UUID
}

func (q *Queries) GetTeamInFo(ctx context.Context, id uuid.UUID) (GetTeamInFoRow, error) {
	row := q.db.QueryRowContext(ctx, getTeamInFo, id)
	var i GetTeamInFoRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeamIndustry,
		&i.TeamSize,
		&i.IsPrivate,
		&i.CreatedBy,
	)
	return i, err
}

const getTeamRoles = `-- name: GetTeamRoles :many
SELECT id, role_name FROM team_roles
WHERE team_id = $1 AND role_name <> 'owner'
`

type GetTeamRolesRow struct {
	ID       uuid.UUID
	RoleName string
}

func (q *Queries) GetTeamRoles(ctx context.Context, teamID uuid.UUID) ([]GetTeamRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamRoles, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamRolesRow
	for rows.Next() {
		var i GetTeamRolesRow
		if err := rows.Scan(&i.ID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeamActivities = `-- name: GetUserTeamActivities :many
WITH user_roles AS (
    SELECT array_agg(tr.role_name) AS roles
    FROM team_memberships tm
    JOIN team_user_roles tur ON tur.team_membership_id = tm.id
    JOIN team_roles tr ON tr.id = tur.role_id
    WHERE tm.user_id = $1
      AND tm.team_id =  $2
),
filtered_activities AS (
    SELECT ta.id, ta.team_id, ta.activity_name, ta.points, ta.created_at, ta.updated_at
    FROM team_activities ta, user_roles ur
    WHERE ta.team_id =  $2   AND (
        'owner' = ANY(ur.roles)  
        OR EXISTS (
            SELECT 1
            FROM unnest(ta.activity_roles) ar
            WHERE ar = ANY(ur.roles)
        )
    )
)
SELECT id, team_id, activity_name, points, created_at, updated_at
FROM filtered_activities
ORDER BY created_at DESC
`

type GetUserTeamActivitiesParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

type GetUserTeamActivitiesRow struct {
	ID           uuid.UUID
	TeamID       uuid.UUID
	ActivityName string
	Points       int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetUserTeamActivities(ctx context.Context, arg GetUserTeamActivitiesParams) ([]GetUserTeamActivitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeamActivities, arg.UserID, arg.TeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTeamActivitiesRow
	for rows.Next() {
		var i GetUserTeamActivitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.ActivityName,
			&i.Points,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT 
    t.id AS team_id,
    t.name,
    MAX(CASE 
        WHEN tr.role_name = 'owner' THEN 1 
        ELSE 0 
    END) AS is_owner
FROM 
    team_memberships tm
JOIN 
    teams t ON tm.team_id = t.id
LEFT JOIN 
    team_user_roles tur ON tm.id = tur.team_membership_id
LEFT JOIN 
    team_roles tr ON tur.role_id = tr.id
WHERE 
    tm.user_id = $1  
GROUP BY 
    t.id, t.name
`

type GetUserTeamsRow struct {
	TeamID  uuid.UUID
	Name    string
	IsOwner int32
}

func (q *Queries) GetUserTeams(ctx context.Context, userID uuid.UUID) ([]GetUserTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTeamsRow
	for rows.Next() {
		var i GetUserTeamsRow
		if err := rows.Scan(&i.TeamID, &i.Name, &i.IsOwner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserTeamOwner = `-- name: IsUserTeamOwner :one
SELECT 
    COALESCE(tr.role_name = 'owner', false) AS is_owner
FROM 
    team_memberships tm
LEFT JOIN 
    team_user_roles tur ON tm.id = tur.team_membership_id
LEFT JOIN 
    team_roles tr ON tur.role_id = tr.id
WHERE 
    tm.user_id = $1
AND 
    tm.team_id = $2
LIMIT 1
`

type IsUserTeamOwnerParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) IsUserTeamOwner(ctx context.Context, arg IsUserTeamOwnerParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, isUserTeamOwner, arg.UserID, arg.TeamID)
	var is_owner interface{}
	err := row.Scan(&is_owner)
	return is_owner, err
}

const setTeamActivity = `-- name: SetTeamActivity :exec
INSERT INTO team_activities (id,team_id ,  activity_name, points, created_at , updated_at , activity_roles) VALUES ($1, $2, $3, $4 , $5 , $6 , $7)
`

type SetTeamActivityParams struct {
	ID            uuid.UUID
	TeamID        uuid.UUID
	ActivityName  string
	Points        int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ActivityRoles []string
}

func (q *Queries) SetTeamActivity(ctx context.Context, arg SetTeamActivityParams) error {
	_, err := q.db.ExecContext(ctx, setTeamActivity,
		arg.ID,
		arg.TeamID,
		arg.ActivityName,
		arg.Points,
		arg.CreatedAt,
		arg.UpdatedAt,
		pq.Array(arg.ActivityRoles),
	)
	return err
}

const setTeamRole = `-- name: SetTeamRole :one
INSERT INTO team_roles (id, role_name, team_id) VALUES ($1, $2, $3) RETURNING id, role_name, team_id
`

type SetTeamRoleParams struct {
	ID       uuid.UUID
	RoleName string
	TeamID   uuid.UUID
}

func (q *Queries) SetTeamRole(ctx context.Context, arg SetTeamRoleParams) (TeamRole, error) {
	row := q.db.QueryRowContext(ctx, setTeamRole, arg.ID, arg.RoleName, arg.TeamID)
	var i TeamRole
	err := row.Scan(&i.ID, &i.RoleName, &i.TeamID)
	return i, err
}
