// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_streaks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getStreakData = `-- name: GetStreakData :one
SELECT current_streak, longest_streak , last_logged_date FROM user_streaks WHERE user_id = $1
`

type GetStreakDataRow struct {
	CurrentStreak  int32
	LongestStreak  int32
	LastLoggedDate sql.NullTime
}

func (q *Queries) GetStreakData(ctx context.Context, userID uuid.UUID) (GetStreakDataRow, error) {
	row := q.db.QueryRowContext(ctx, getStreakData, userID)
	var i GetStreakDataRow
	err := row.Scan(&i.CurrentStreak, &i.LongestStreak, &i.LastLoggedDate)
	return i, err
}

const updateStreakData = `-- name: UpdateStreakData :exec

INSERT INTO user_streaks (user_id, current_streak, longest_streak, last_logged_date) VALUES ($1 , $2 , $3 , $4) ON CONFLICT (user_id) DO UPDATE SET current_streak = $2, longest_streak = $3, last_logged_date = $4
`

type UpdateStreakDataParams struct {
	UserID         uuid.UUID
	CurrentStreak  int32
	LongestStreak  int32
	LastLoggedDate sql.NullTime
}

func (q *Queries) UpdateStreakData(ctx context.Context, arg UpdateStreakDataParams) error {
	_, err := q.db.ExecContext(ctx, updateStreakData,
		arg.UserID,
		arg.CurrentStreak,
		arg.LongestStreak,
		arg.LastLoggedDate,
	)
	return err
}
