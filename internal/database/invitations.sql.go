// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invitations.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTeamInvitation = `-- name: CreateTeamInvitation :exec
INSERT INTO team_invitations (id, team_id, sender_id, recipient_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateTeamInvitationParams struct {
	ID          uuid.UUID
	TeamID      uuid.UUID
	SenderID    uuid.UUID
	RecipientID uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateTeamInvitation(ctx context.Context, arg CreateTeamInvitationParams) error {
	_, err := q.db.ExecContext(ctx, createTeamInvitation,
		arg.ID,
		arg.TeamID,
		arg.SenderID,
		arg.RecipientID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteTeamInvitation = `-- name: DeleteTeamInvitation :exec
DELETE FROM team_invitations
WHERE id = $1
`

func (q *Queries) DeleteTeamInvitation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTeamInvitation, id)
	return err
}

const getInvitationsCount = `-- name: GetInvitationsCount :one

SELECT COUNT(recipient_id) AS invite_count FROM team_invitations ti
WHERE ti.recipient_id = $1 AND ti.seen = false
`

func (q *Queries) GetInvitationsCount(ctx context.Context, recipientID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getInvitationsCount, recipientID)
	var invite_count int64
	err := row.Scan(&invite_count)
	return invite_count, err
}

const getTeamInvitations = `-- name: GetTeamInvitations :many
SELECT 
    ti.id AS invitation_id,
    t.id AS team_id,
    t.name AS team_name,
    t.team_industry AS team_industry,
    t.team_size AS team_size
FROM 
    team_invitations ti
JOIN 
    teams t 
ON 
    ti.team_id = t.id
WHERE 
    ti.recipient_id = $1
ORDER BY 
    ti.created_at DESC
`

type GetTeamInvitationsRow struct {
	InvitationID uuid.UUID
	TeamID       uuid.UUID
	TeamName     string
	TeamIndustry string
	TeamSize     int32
}

func (q *Queries) GetTeamInvitations(ctx context.Context, recipientID uuid.UUID) ([]GetTeamInvitationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamInvitations, recipientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamInvitationsRow
	for rows.Next() {
		var i GetTeamInvitationsRow
		if err := rows.Scan(
			&i.InvitationID,
			&i.TeamID,
			&i.TeamName,
			&i.TeamIndustry,
			&i.TeamSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setInvitationAsSeen = `-- name: SetInvitationAsSeen :exec
UPDATE team_invitations
SET seen = true
WHERE recipient_id = $1 AND seen = false
`

func (q *Queries) SetInvitationAsSeen(ctx context.Context, recipientID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setInvitationAsSeen, recipientID)
	return err
}
