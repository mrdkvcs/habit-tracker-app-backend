// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id , created_at , updated_at , username , email , password_hash , api_key)
VALUES ($1, $2, $3, $4 , $5 , $6 , encode(sha256(random()::text::bytea) , 'hex'))
RETURNING id, created_at, updated_at, username, email, password_hash, api_key
`

type CreateUserParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Username     string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ApiKey,
	)
	return i, err
}

const getUserByApikey = `-- name: GetUserByApikey :one
SELECT id, created_at, updated_at, username, email, password_hash, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByApikey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApikey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ApiKey,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, password_hash, api_key FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ApiKey,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    u.id,
    u.username,
    CASE 
        WHEN ti.recipient_id IS NOT NULL THEN TRUE 
        ELSE FALSE 
    END AS has_been_invited
FROM 
    users u
LEFT JOIN 
    team_invitations ti 
ON 
    u.id = ti.recipient_id 
    AND ti.team_id = $1
WHERE 
    u.id != $2
    AND u.username ILIKE $3
ORDER BY 
    u.username
LIMIT 10
`

type GetUsersParams struct {
	TeamID   uuid.UUID
	ID       uuid.UUID
	Username string
}

type GetUsersRow struct {
	ID             uuid.UUID
	Username       string
	HasBeenInvited bool
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.TeamID, arg.ID, arg.Username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.HasBeenInvited); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
