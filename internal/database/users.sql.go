// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPasswordReset = `-- name: CreatePasswordReset :exec

INSERT INTO password_reset (id , user_id , token , expires_at) VALUES ($1 , $2 , $3  ,$4)
`

type CreatePasswordResetParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) error {
	_, err := q.db.ExecContext(ctx, createPasswordReset,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id , created_at , updated_at , username , email , password_hash , google_id) VALUES ($1, $2, $3, $4 , $5 , $6 , $7) RETURNING id, created_at, updated_at, username, email, password_hash, google_id
`

type CreateUserParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Username     string
	Email        string
	PasswordHash sql.NullString
	GoogleID     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.GoogleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
	)
	return i, err
}

const deletePasswordReset = `-- name: DeletePasswordReset :exec
DELETE FROM password_reset WHERE token = $1
`

func (q *Queries) DeletePasswordReset(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletePasswordReset, token)
	return err
}

const getPasswordReset = `-- name: GetPasswordReset :one

SELECT u.email , pr.expires_at FROM password_reset pr  JOIN users u  ON u.id = pr.user_id  WHERE token = $1
`

type GetPasswordResetRow struct {
	Email     string
	ExpiresAt time.Time
}

func (q *Queries) GetPasswordReset(ctx context.Context, token string) (GetPasswordResetRow, error) {
	row := q.db.QueryRowContext(ctx, getPasswordReset, token)
	var i GetPasswordResetRow
	err := row.Scan(&i.Email, &i.ExpiresAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, password_hash, google_id FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
	)
	return i, err
}

const getUserByGoogleId = `-- name: GetUserByGoogleId :one
SELECT id, created_at, updated_at, username, email, password_hash, google_id FROM users WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleId(ctx context.Context, googleID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleId, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, username, email, password_hash, google_id FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    u.id,
    u.username,
    CASE 
        WHEN ti.recipient_id IS NOT NULL THEN TRUE 
        ELSE FALSE 
    END AS has_been_invited
FROM 
    users u
LEFT JOIN 
    team_invitations ti 
ON 
    u.id = ti.recipient_id 
    AND ti.team_id = $1
WHERE 
    u.id != $2
    AND u.username ILIKE $3
ORDER BY 
    u.username
LIMIT 10
`

type GetUsersParams struct {
	TeamID   uuid.UUID
	ID       uuid.UUID
	Username string
}

type GetUsersRow struct {
	ID             uuid.UUID
	Username       string
	HasBeenInvited bool
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.TeamID, arg.ID, arg.Username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.HasBeenInvited); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setNewPassword = `-- name: SetNewPassword :exec

UPDATE users SET password_hash = $1 WHERE email = $2
`

type SetNewPasswordParams struct {
	PasswordHash sql.NullString
	Email        string
}

func (q *Queries) SetNewPassword(ctx context.Context, arg SetNewPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setNewPassword, arg.PasswordHash, arg.Email)
	return err
}
