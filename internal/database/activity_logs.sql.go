// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: activity_logs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkIfActivityLogExists = `-- name: CheckIfActivityLogExists :one

SELECT EXISTS (
  SELECT 1 FROM user_activity_logs WHERE user_id = $1 AND activity_id = $2
)
`

type CheckIfActivityLogExistsParams struct {
	UserID     uuid.UUID
	ActivityID uuid.NullUUID
}

func (q *Queries) CheckIfActivityLogExists(ctx context.Context, arg CheckIfActivityLogExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfActivityLogExists, arg.UserID, arg.ActivityID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM user_activities WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const editActivity = `-- name: EditActivity :exec
UPDATE user_activities SET name = $1 , points = $2, activity_type = 'custom' WHERE id = $3
`

type EditActivityParams struct {
	Name   string
	Points int32
	ID     uuid.UUID
}

func (q *Queries) EditActivity(ctx context.Context, arg EditActivityParams) error {
	_, err := q.db.ExecContext(ctx, editActivity, arg.Name, arg.Points, arg.ID)
	return err
}

const getActivities = `-- name: GetActivities :many
SELECT id , name , points , activity_type FROM user_activities WHERE user_id = $1 ORDER BY points DESC
`

type GetActivitiesRow struct {
	ID           uuid.UUID
	Name         string
	Points       int32
	ActivityType string
}

func (q *Queries) GetActivities(ctx context.Context, userID uuid.UUID) ([]GetActivitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getActivities, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActivitiesRow
	for rows.Next() {
		var i GetActivitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Points,
			&i.ActivityType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyActivityLogs = `-- name: GetDailyActivityLogs :many
SELECT activity_id , ua.name ,  duration , user_activity_logs.points , activity_description FROM user_activity_logs LEFT  JOIN user_activities ua ON ua.id = user_activity_logs.activity_id WHERE user_activity_logs.user_id = $1 AND DATE(logged_at) = CURRENT_DATE
`

type GetDailyActivityLogsRow struct {
	ActivityID          uuid.NullUUID
	Name                sql.NullString
	Duration            int32
	Points              int32
	ActivityDescription string
}

func (q *Queries) GetDailyActivityLogs(ctx context.Context, userID uuid.UUID) ([]GetDailyActivityLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDailyActivityLogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDailyActivityLogsRow
	for rows.Next() {
		var i GetDailyActivityLogsRow
		if err := rows.Scan(
			&i.ActivityID,
			&i.Name,
			&i.Duration,
			&i.Points,
			&i.ActivityDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyActivityLogsCount = `-- name: GetDailyActivityLogsCount :one
SELECT COUNT(*) as daily_activity_count
FROM user_activity_logs
WHERE user_id = $1 
AND DATE(logged_at) = CURRENT_DATE
`

func (q *Queries) GetDailyActivityLogsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDailyActivityLogsCount, userID)
	var daily_activity_count int64
	err := row.Scan(&daily_activity_count)
	return daily_activity_count, err
}

const getDailyMinutes = `-- name: GetDailyMinutes :one

SELECT COALESCE(SUM(duration), 0)::BIGINT AS total_hours
FROM user_activity_logs
WHERE user_id = $1
AND DATE(logged_at) = CURRENT_DATE
`

func (q *Queries) GetDailyMinutes(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDailyMinutes, userID)
	var total_hours int64
	err := row.Scan(&total_hours)
	return total_hours, err
}

const getDailyPoints = `-- name: GetDailyPoints :one
SELECT 
  CAST(COALESCE((SELECT SUM(ual.points) 
            FROM user_activity_logs ual 
            WHERE ual.user_id = $1 
              AND DATE(ual.logged_at) = CURRENT_DATE), 0) AS INTEGER) AS total_points,
  CAST(COALESCE((SELECT g.goal_points 
            FROM user_goals g 
            WHERE g.user_id = $1 
              AND DATE(g.created_at) = CURRENT_DATE), 0) AS INTEGER) AS goal_points
`

type GetDailyPointsRow struct {
	TotalPoints int32
	GoalPoints  int32
}

func (q *Queries) GetDailyPoints(ctx context.Context, userID uuid.UUID) (GetDailyPointsRow, error) {
	row := q.db.QueryRowContext(ctx, getDailyPoints, userID)
	var i GetDailyPointsRow
	err := row.Scan(&i.TotalPoints, &i.GoalPoints)
	return i, err
}

const getDailyProductiveTime = `-- name: GetDailyProductiveTime :one
SELECT 
    CAST(COALESCE(SUM(CASE WHEN points > 0 THEN duration ELSE 0 END) , 0) AS INTEGER) AS productive_time,
    CAST(COALESCE(SUM(CASE WHEN points < 0 THEN duration ELSE 0 END), 0) AS INTEGER) AS unproductive_time
FROM 
    user_activity_logs
WHERE 
    DATE(logged_at) = CURRENT_DATE 
    AND user_id = $1
`

type GetDailyProductiveTimeRow struct {
	ProductiveTime   int32
	UnproductiveTime int32
}

func (q *Queries) GetDailyProductiveTime(ctx context.Context, userID uuid.UUID) (GetDailyProductiveTimeRow, error) {
	row := q.db.QueryRowContext(ctx, getDailyProductiveTime, userID)
	var i GetDailyProductiveTimeRow
	err := row.Scan(&i.ProductiveTime, &i.UnproductiveTime)
	return i, err
}

const getRecentActivities = `-- name: GetRecentActivities :many

SELECT duration , user_activity_logs.points , activity_description, ua.name   FROM user_activity_logs LEFT JOIN user_activities ua ON ua.id = user_activity_logs.activity_id WHERE user_activity_logs.user_id = $1 AND DATE(logged_at) = CURRENT_DATE ORDER BY logged_at DESC LIMIT 3
`

type GetRecentActivitiesRow struct {
	Duration            int32
	Points              int32
	ActivityDescription string
	Name                sql.NullString
}

func (q *Queries) GetRecentActivities(ctx context.Context, userID uuid.UUID) ([]GetRecentActivitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentActivities, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentActivitiesRow
	for rows.Next() {
		var i GetRecentActivitiesRow
		if err := rows.Scan(
			&i.Duration,
			&i.Points,
			&i.ActivityDescription,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setActivity = `-- name: SetActivity :one
INSERT INTO user_activities (id , user_id , name , points , activity_type ) VALUES ($1 , $2 , $3 , $4 , $5 ) RETURNING id, user_id, name, points, activity_type, created_at, updated_at
`

type SetActivityParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	Name         string
	Points       int32
	ActivityType string
}

func (q *Queries) SetActivity(ctx context.Context, arg SetActivityParams) (UserActivity, error) {
	row := q.db.QueryRowContext(ctx, setActivity,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Points,
		arg.ActivityType,
	)
	var i UserActivity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Points,
		&i.ActivityType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setActivityLog = `-- name: SetActivityLog :exec
INSERT INTO user_activity_logs (id , user_id , activity_id , duration , points , logged_at , activity_description  ) VALUES ($1 , $2 , $3 , $4 , $5 , $6 , $7  )
`

type SetActivityLogParams struct {
	ID                  uuid.UUID
	UserID              uuid.UUID
	ActivityID          uuid.NullUUID
	Duration            int32
	Points              int32
	LoggedAt            time.Time
	ActivityDescription string
}

func (q *Queries) SetActivityLog(ctx context.Context, arg SetActivityLogParams) error {
	_, err := q.db.ExecContext(ctx, setActivityLog,
		arg.ID,
		arg.UserID,
		arg.ActivityID,
		arg.Duration,
		arg.Points,
		arg.LoggedAt,
		arg.ActivityDescription,
	)
	return err
}

const setDefaultActivities = `-- name: SetDefaultActivities :exec
INSERT INTO user_activities (id , user_id , name , points , activity_type ) 
VALUES
(uuid_generate_v4(), $1, 'Learning', 10, 'default'),
(uuid_generate_v4(), $1, 'Exercise', 8, 'default'),
(uuid_generate_v4(), $1, 'Meditation', 6, 'default'),
(uuid_generate_v4(), $1, 'Reading', 4, 'default'),
(uuid_generate_v4(), $1, 'Household Chores', 2, 'default'),
(uuid_generate_v4(), $1, 'Watching Series', -2, 'default'),
(uuid_generate_v4(), $1, 'Watching TV', -4, 'default'),
(uuid_generate_v4(), $1, 'Gaming', -6, 'default'),
(uuid_generate_v4(), $1, 'Social Media Scrolling', -8, 'default'),
(uuid_generate_v4(), $1, 'Watching adult websites', -10, 'default')
`

func (q *Queries) SetDefaultActivities(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setDefaultActivities, userID)
	return err
}
