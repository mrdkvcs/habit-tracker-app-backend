// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: members.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getNotAssignedRoles = `-- name: GetNotAssignedRoles :many
SELECT 
    tr.id, 
    tr.role_name
FROM 
    team_roles tr
LEFT JOIN 
    team_user_roles tur ON tr.id = tur.role_id 
    AND tur.team_membership_id = $1
WHERE 
    tur.role_id IS NULL
ORDER BY 
    tr.role_name
`

type GetNotAssignedRolesRow struct {
	ID       uuid.UUID
	RoleName string
}

func (q *Queries) GetNotAssignedRoles(ctx context.Context, teamMembershipID uuid.UUID) ([]GetNotAssignedRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotAssignedRoles, teamMembershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotAssignedRolesRow
	for rows.Next() {
		var i GetNotAssignedRolesRow
		if err := rows.Scan(&i.ID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT 
    tm.id,
    u.username,
    COALESCE(CAST(STRING_AGG(tr.role_name, ', ') AS TEXT), '') AS roles
FROM 
    team_memberships tm
JOIN 
    users u ON tm.user_id = u.id
LEFT JOIN 
    team_user_roles tur ON tm.id = tur.team_membership_id
LEFT JOIN 
    team_roles tr ON tur.role_id = tr.id
WHERE 
    tm.team_id = $1
    AND tm.user_id <> $2
GROUP BY 
    u.username,
    tm.id
ORDER BY 
    u.username
`

type GetTeamMembersParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

type GetTeamMembersRow struct {
	ID       uuid.UUID
	Username string
	Roles    string
}

func (q *Queries) GetTeamMembers(ctx context.Context, arg GetTeamMembersParams) ([]GetTeamMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, arg.TeamID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamMembersRow
	for rows.Next() {
		var i GetTeamMembersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Roles); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setMemberRoles = `-- name: SetMemberRoles :exec
INSERT INTO team_user_roles (id, team_membership_id, role_id) VALUES ($1, $2, $3)
`

type SetMemberRolesParams struct {
	ID               uuid.UUID
	TeamMembershipID uuid.UUID
	RoleID           uuid.UUID
}

func (q *Queries) SetMemberRoles(ctx context.Context, arg SetMemberRolesParams) error {
	_, err := q.db.ExecContext(ctx, setMemberRoles, arg.ID, arg.TeamMembershipID, arg.RoleID)
	return err
}
